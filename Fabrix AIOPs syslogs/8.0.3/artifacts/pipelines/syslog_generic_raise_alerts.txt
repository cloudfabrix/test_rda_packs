%% stream = no and limit = 0
%% template_type="jinja"

{% if customer_tag %}  

--> @dm:query-persistent-stream-from-bookmark name = "syslog_udp_event_stream_all"  & bookmark = "syslog_udp_event_stream_all_bkmrk" and query="customer_tag is '{{ customer_tag }}'"
{% else %} 
 --> @dm:query-persistent-stream-from-bookmark name = "syslog_udp_event_stream_all"  & bookmark = "syslog_udp_event_stream_all_bkmrk" and query="customer_tag is empty"
    
{% endif %}

# Add missing columns to the dataset
--> @dm:rename-columns customer_tag = "customerTag" & project_id = "projectId" & customer_id = "customerId"
--> @dm:add-missing-columns columns = "customer_tag,customer_id,project_id" 
##--> @dm:add-missing-columns columns = "customer_id" and value = "{{ customer_id }}"
   ## --> @dm:add-missing-columns columns = "customer_tag" and value = "${PKG_CONTEXT_CUSTOMER_TAG}"
    ##--> @dm:add-missing-columns columns = "customer_id" and value = "$PKG_CONTEXT_CUSTOMER_ID"
    --> @dm:save name = "temp-syslog_data"
    {% if customer_tag %} 
    --> @dm:recall name="{{ customer_tag }}_alert_endpoint_details"
    
    {% else %}
    --> @dm:recall name="alert_endpoint_details"

    {% endif %}
    --> @dm:manipulate-string from  = "alertEndpointName" and func = "strip" and to = "alertEndpointName"
    --> *dm:filter alertEndpointName is 'Syslog' and webhookURL is not Empty
    --> @dm:save name = "temp-webhook-url-details"
    --> @dm:recall name = "temp-syslog_data"
    --> @dm:enrich dict = "temp-webhook-url-details" & src_key_cols = "customer_tag,project_id" & dict_key_cols="customer_tag,project_id" & enrich_cols = "webhookURL"
    --> *exec:if-condition device_status is "MANAGED" and webhookURL is not empty
       --> @dm:eval raw = "raw.strip()"
       --> @dm:grok column = 'raw' & pattern = "<%{POSINT:priority}>%{SYSLOGTIMESTAMP:timestamp}\s%{HOSTNAME:hostname_short}\s%{GREEDYDATA:message}|<%{POSINT:priority}>%{NUMBER:num}\s%{TIMESTAMP_ISO8601:timestamp}\s%{HOSTNAME:hostname}\s%{PROG:service}\s%{GREEDYDATA:pid}:\s-\s-\s%{GREEDYDATA:message}|<%{POSINT:priority}>\s%{SYSLOGTIMESTAMP:timestamp}\s%{DATA:type}:\s%{GREEDYDATA:message}"
       --> @dm:to-json exclude_columns = "_RDA_Id|count_" & output_column = "syslog_payload"
       --> @dm:to-json output_column = 'syslog_payload'
         -->@dm:save name = "temp-syslog-payload"
          -->@dm:recall name = "temp-syslog-payload"
       
# Process each row for webhookURL and send the data
{% raw %}
{% for row in rows %}
    {% if row.webhookURL %}
          --> @restclient:write url  = '{{ row.webhookURL }}' & envelope is "{{'{{syslog_payload}}'}}" & batch_size = 1
    {% endif %}
{% endfor %}
{% endraw %}
    --> @exec:end-if

