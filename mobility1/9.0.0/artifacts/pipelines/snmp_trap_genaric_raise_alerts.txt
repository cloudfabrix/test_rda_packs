%% stream = no and limit = 0

## snmp_trap_genaric_raise_alerts
@c:new-block
    --> @dm:recall name="alert_endpoint_details" & cache_refresh_seconds = 120
    --> @dm:manipulate-string from = "alertEndpointName" and func = "strip" and to = "alertEndpointName"
    --> *dm:filter alertEndpointName is 'SNMP_Traps' and webhookURL is not Empty
    --> @dm:save name = "temp-webhook-url-details"

--> @c:new-block
    ## -->  @rn:read-stream     name = 'snmp_trap_event_stream' & group = 'snmp_trap_event_stream_group_alerts'
    --> @dm:query-persistent-stream-from-bookmark name = "snmp_trap_event_stream" & bookmark = "snmp_trap_event_stream_bkmrk"
    --> @dm:enrich dict = "temp-webhook-url-details" & src_key_cols = "customerTag,projectId" & dict_key_cols="customerTag,projectId" & enrich_cols = "webhookURL" & cache_refresh_seconds = 120
    --> @dm:enrich dict = "device_mapping" & src_key_cols="rda_gw_client_ip" & dict_key_cols = "ip_address" & enrich_cols = "zone,network_type,CLLI_code,city,region,network_code,image,device" & replace_values = "yes" & cache_refresh_seconds = "60"
    --> @dm:rename-columns device_NEW='device'
    --> @rn:write-stream name = 'snmp_trap_enriched_events_stream'
    --> *exec:if-condition webhookURL is not Empty
       ## --> *dm:filter device_status is "MANAGED"
       --> @dm:add-missing-columns columns = 'mappingStatus' & value = 'found'
       --> @dm:eval-multi-proc execution_step = "'source_event'"
       --> *dm:filter mappingStatus is 'found'
       --> @dm:eval execution_step = "'mapping_filter'"
       --> @dm:rename-columns snmp_trap_mib = 'snmpTrapMIB' & snmp_trap_name = 'snmpTrapName' & snmp_trap_description = 'snmpTrapDescription' & snmp_trap_oid = 'snmpTrapOID' & device_NEW = 'device_name'
       --> @dm:enrich-using-rule-dict dict = "snmp_trap_alert_rules_dict" & enrich_columns = "action,reason,state,severity"
       --> @dm:eval-multi-proc execution_step = "'alert_rule_enrichment'" and   timestamp="utcnow().isoformat()"
       --> *dm:filter action is 'KEEP'
       --> @dm:map to = 'snmp_trap_timestamp' and from = 'rda_gw_timestamp'
       --> @dm:to-json output_column is payload
       --> @exec:for-loop num_rows = 1
          --> @restclient:write url  = '{{row.webhookURL}}' & envelope is "{{'{{payload}}'}}" & batch_size = 1
       --> @exec:end-loop
    --> @exec:end-if

