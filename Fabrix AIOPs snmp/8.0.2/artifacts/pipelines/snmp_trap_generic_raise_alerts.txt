%% template_type="jinja"


# Initialize empty dataset to store customer context
@dm:empty
--> @dm:save name = "temp-customer-context"

# Query the SNMP trap event stream with the customer_tag filter
--> @c:new-block
{% if customer_tag %}  

--> @dm:query-persistent-stream-from-bookmark name = "snmp_trap_event_stream_all" & bookmark = "snmp_trap_event_stream_all_bkmrk" and query="customer_tag is '{{ customer_tag }}'"
{% else %}   
--> @dm:query-persistent-stream-from-bookmark name = "snmp_trap_event_stream_all" & bookmark = "snmp_trap_event_stream_all_bkmrk" 

{% endif %}
-->@dm:rename-columns customer_tag = "customerTag" & project_id = "projectId" & customer_id = "customerId"
--> @dm:add-missing-columns columns = "customer_tag,customer_id,project_id"
--> @dm:save name = "temp-snmp_data"
{% if customer_tag %}  
--> @dm:recall name="{{ customer_tag }}_alert_endpoint_details" & cache_refresh_seconds = 120
{% else %}  
     --> @dm:recall name="alert_endpoint_details" & cache_refresh_seconds = 120
     
{% endif %}
--> @dm:manipulate-string from = "alertEndpointName" and func = "strip" and to = "alertEndpointName"
--> *dm:filter alertEndpointName is 'SNMP_Traps' and webhookURL is not Empty
--> @dm:save name = "temp-webhook-url-details"

# Enrich SNMP data with the webhook URLs from the alert endpoint details
--> @dm:recall name = "temp-snmp_data"
--> @dm:enrich dict = "temp-webhook-url-details" & src_key_cols = "customer_tag,project_id" & dict_key_cols="customer_tag,project_id" & enrich_cols = "webhookURL"

# If condition to proceed with further processing
--> *exec:if-condition webhookURL is not Empty and device_status is "MANAGED"
   --> @dm:add-missing-columns columns = 'mappingStatus' & value = 'found'
   --> @dm:eval-multi-proc execution_step = "'source_event'"
   --> *dm:filter mappingStatus is 'found'
   --> @dm:eval execution_step = "'mapping_filter'"
   --> @dm:rename-columns snmp_trap_mib = 'snmpTrapMIB' & snmp_trap_name = 'snmpTrapName' & snmp_trap_description = 'snmpTrapDescription' & snmp_trap_oid = 'snmpTrapOID'
   {% if customer_tag %} 
   --> @dm:enrich-using-rule-dict dict = "{{ customer_tag }}_snmp_trap_alert_rules_dict" & enrich_columns = "action,reason,state,severity"
   {% else %}
   --> @dm:enrich-using-rule-dict dict = "snmp_trap_alert_rules_dict" & enrich_columns = "action,reason,state,severity"

   {% endif %}
   --> @dm:eval-multi-proc execution_step = "'alert_rule_enrichment'" and timestamp="utcnow().isoformat()"
   --> @dm:map to = 'snmp_trap_timestamp' and from = 'rda_gw_timestamp'
   --> @dm:to-json output_column is payload
   --> @dm:save name = "temp-url"

# Recall the temp-url dataset containing the webhook URLs
--> @dm:recall name = "temp-url"

# Process each row for webhookURL and send the data
{% raw %}
{% for row in rows %}
    {% if row.webhookURL %}
        
        --> @restclient:write url = "{{ row.webhookURL }}" & envelope is "{{'{{payload}}'}}" & batch_size = 1
    {% endif %}
{% endfor %}
{% endraw %}

--> @exec:end-if
