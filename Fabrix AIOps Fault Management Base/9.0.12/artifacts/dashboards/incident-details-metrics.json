{
    "name": "incident-details-metrics",
    "label": "Metrics",
    "description": "Metrics",
    "version": "25.5.30.1",
    "enabled": true,
    "exportable": false,
    "dashboard_style": "auto",
    "dashboard_generator": {
        "attachment": "generator_jinja"
    },
    "status_poller": {},
    "dashboard_type": "template",
    "template_variables": {
        "INCIDENT_CREATED_TIME": {
            "contextId": "i_created_ts",
            "default": "2024-04-10T09:39:36.265000"
        }
    },
    "dashboard_filters": {
        "time_filter": true,
        "columns_filter": [],
        "default_time_range": {
            "from_time": "{{INCIDENT_CREATED_TIME}}",
            "from_time_delta_hours": -8,
            "to_time": "{{INCIDENT_CREATED_TIME}}",
            "to_time_delta_hours": 4,
            "label": "Incident Time"
        }
    },
    "dashboard_sections": [
        {
            "title": "Metrics",
            "show_filter": false,
            "projects": [],
            "widgets": []
        }
    ],
    "saved_time": "2025-05-30T23:07:54.811025",
    "attachments": [
        {
            "name": "generator_jinja",
            "value": "{% set ns = namespace() %}\r\n{% set query = \"project_id is '\" + projectid + \"' and incident_id is '\" + incidentid + \"' \" %}\r\n{% set incidentstream = \"oia-incidents-stream\" %}\r\n{% set incident_res = engine.query_stream_data(stream=incidentstream, cfxql_query=query) %}\r\n{% if incident_res is defined and incident_res|length > 0 %}\r\n    {% set incident = incident_res[0] %}\r\n    {% set metrics_stream = \"oia-ml-metrics-regression-output\" %}\r\n    {% set incident_occurance_time = incident.get(\"i_cfx_incident_occurred\", incident.get(\"i_created_ts\")) %}\r\n    {% set from_time = incident_occurance_time + ((-12)* 60 * 60 * 1000) %}\r\n    {% set from_time_str = to_datetime(from_time, unit='ms').isoformat() %}\r\n    {% set to_time =  incident_occurance_time + (4 * 60 * 60 * 1000) %}\r\n    {% set to_time_str = to_datetime(to_time, unit='ms').isoformat() %}\r\n    {% set config_query = \"roomid is '\" + projectid + \"' and pagename is 'metrics' \" %}\r\n    {% set config_stream = \"oia-incident-page-config\" %}\r\n    {% set config_res = engine.query_stream_data(stream=config_stream, cfxql_query=config_query) %}\r\n    {% if config_res is defined and config_res|length > 0 %}\r\n        {% set page_config = config_res[0] %}\r\n    {% endif %}\r\n\r\n    {% set alert_id_values = [] %}\r\n    {% set alert_asset_types = [] %}\r\n    {% set ns.alert_tag_values = {} %}\r\n    {% if page_config %}\r\n        {% set _ = logger.debug(\"page_config is: \" + str(page_config)) %}\r\n        {% set alert_columns = page_config.get(\"alert_columns\") %}\r\n        {% if alert_columns %}\r\n            {% set _ = logger.debug(\"alert_columns from page_config is: \" + str(alert_columns)) %}\r\n            {% if alert_columns.__class__.__name__ != 'list' %}\r\n                {% set _ = logger.debug(\"processing alert_columns as str\") %}\r\n                {% if \",\" in alert_columns %}\r\n                    {% set alert_columns = alert_columns.split(\",\") %}\r\n                {% else %}\r\n                    {% set alert_columns = [alert_columns] %}\r\n                {% endif %}\r\n            {% endif %}\r\n        {% else %}\r\n            {% set alert_columns=[] %}\r\n        {% endif %}\r\n        {% set _ = logger.debug(\"Final alert_columns is: \" + str(alert_columns)) %}\r\n\r\n        {% set alert_type_columns = page_config.get(\"alert_type_columns\") %}\r\n        {% if alert_type_columns %}\r\n            {% set _ = logger.debug(\"alert_type_columns from page_config is: \" + str(alert_type_columns)) %}\r\n            {% if alert_type_columns.__class__.__name__ != 'list' %}\r\n                {% set _ = logger.debug(\"processing alert_type_columns as str\") %}\r\n                {% if \",\" in alert_type_columns %}\r\n                    {% set alert_type_columns = alert_type_columns.split(\",\") %}\r\n                {% else %}\r\n                    {% set alert_type_columns = [alert_type_columns] %}\r\n                {% endif %}\r\n            {% endif %}\r\n        {% else %}\r\n            {% set alert_type_columns=[] %}\r\n        {% endif %}\r\n        {% set _ = logger.debug(\"Final alert_type_columns is: \" + str(alert_type_columns)) %}\r\n\r\n        {% set alert_tag_columns = page_config.get(\"alert_tag_columns\") %}\r\n        {% if alert_tag_columns %}\r\n            {% set _ = logger.debug(\"alert_tag_columns from page_config is: \" + str(alert_tag_columns)) %}\r\n            {% if alert_tag_columns.__class__.__name__ != 'list' %}\r\n                {% set _ = logger.debug(\"processing alert_tag_columns as str\") %}\r\n                {% if \",\" in alert_tag_columns %}\r\n                    {% set alert_tag_columns = alert_tag_columns.split(\",\") %}\r\n                {% else %}\r\n                    {% set alert_tag_columns = [alert_tag_columns] %}\r\n                {% endif %}\r\n            {% endif %}\r\n        {% else %}\r\n            {% set alert_tag_columns=[] %}\r\n        {% endif %}\r\n        {% set _ = logger.debug(\"Final alert_tag_columns is: \" + str(alert_tag_columns)) %}\r\n\r\n        {% set alert_query = \"a_incident_id is '\" + incidentid + \"'\" %}\r\n        {% set alerts_res = engine.query_stream_data(stream=\"oia-alerts-stream\", cfxql_query=alert_query) %}\r\n        {% set _=logger.debug(\"alerts_res are: \" + str(alerts_res) if alerts_res else \"None\") %}\r\n        {% if alerts_res is defined %}\r\n            {% for item in alerts_res %}\r\n                \r\n                {% set ns.cur_alert_ids = [] %}\r\n\r\n                {% for alert_column in alert_columns %}\r\n                    {% set _ = logger.debug(\"Going to find alert_column '\" + alert_column +\"' from item: \" + str(item)) %}\r\n                    {% set alert_id_val = item.get(alert_column) %}\r\n                    {% set _ = logger.debug(\"found alert_id_val as: \" + str(alert_id_val)) %}\r\n                    {% if alert_id_val %}\r\n                        {% if alert_id_val not in alert_id_values %}\r\n                            {% set x = alert_id_values.append(alert_id_val) %}\r\n                            {% set _ = logger.debug(\"From alerts added alert_id_val \" + alert_id_val +\" to list of eligible alert_id_values\") %}\r\n                        {% else %}\r\n                            {% set _ = logger.debug(\"Found existing alert_id_val \" + str(alert_id_val) +\" hence skipping to add to list of eligible alert_id_values\") %}\r\n                        {% endif %}\r\n\r\n                        {% if alert_id_val not in ns.cur_alert_ids %}\r\n                            {% set x = ns.cur_alert_ids.append(alert_id_val) %}\r\n                        {% endif %}\r\n                    {% endif %}\r\n                {% endfor %}\r\n\r\n                {% for alert_type_column in alert_type_columns %}\r\n                    {% set alert_type_val = item.get(alert_type_column) %}\r\n                    {% if alert_type_val %}\r\n                        {% if alert_type_val not in alert_asset_types %}\r\n                            {% set x = alert_asset_types.append(alert_type_val) %}\r\n                            {% set _ = logger.debug(\"From alerts added alert_type_val \" + alert_type_val +\" to list of eligible alert_asset_types\") %}\r\n                        {% else %}\r\n                            {% set _ = logger.debug(\"Found existing alert_type_val \" + alert_type_val +\" hence skipping to add to list of eligible alert_asset_types\") %}\r\n                        {% endif %}\r\n                    {% endif %}\r\n                {% endfor %}\r\n\r\n                {% for alert_tag_column in alert_tag_columns %}\r\n                    {% set alert_tag_val = item.get(alert_tag_column) %}\r\n                    {% if alert_tag_val %}\r\n                        {% for cur_alert_id in ns.cur_alert_ids %}\r\n                            {% if cur_alert_id not in ns.alert_tag_values %}\r\n                                {% set x=ns.alert_tag_values.__setitem__(cur_alert_id, []) %}\r\n                            {% endif %}\r\n                            {% if alert_tag_val not in ns.alert_tag_values[cur_alert_id] %}\r\n                                {% set x = ns.alert_tag_values[cur_alert_id].append(alert_tag_val) %}\r\n                                {% set _ = logger.debug(\"From alerts added alert_tag_val \" + alert_tag_val +\" to list of eligible alert_tag_values\") %}\r\n                            {% else %}\r\n                                {% set _ = logger.debug(\"Found existing alert_tag_val \" + alert_tag_val +\" hence skipping to add to list of eligible alert_tag_values\") %}\r\n                            {% endif %}\r\n                        {% endfor %}        \r\n                    {% endif %}\r\n                {% endfor %}\r\n            {% endfor %}\r\n        {% else %}\r\n            {% set _ = logger.warning(\"No alerts found but page config is defined to use alerts hence no metrics for incident: \" + incidentid) %}\r\n        {% endif %}\r\n\r\n        {% if alert_id_values and alert_asset_types %}\r\n            {% set _ = logger.info(\"Final alert_id_values is: \" + str(alert_id_values)) %}\r\n            {% set _ = logger.info(\"Final alert_asset_types is: \" + str(alert_asset_types)) %}\r\n            {% set _ = logger.info(\"Final alert_tag_values is: \" + str(ns.alert_tag_values)) %}\r\n            {% set widgets_config_json = page_config.get(\"widgets_config_json\") %}\r\n            {% set widgets_config_json_type = \"string\" %}\r\n            {% if widgets_config_json is sequence and widgets_config_json is not mapping and widgets_config_json is not string %}\r\n                {% set widgets_config_json_type = \"list\" %}\r\n            {% endif %}\r\n            {% if widgets_config_json and widgets_config_json_type == \"string\" %}\r\n                {% set widgets_config_json = json_loads(widgets_config_json) %}\r\n            {% endif %}\r\n\r\n            {% set _ = logger.info(\"Final widgets_config_json is: \" + ( str(widgets_config_json) if widgets_config_json else \"None\" )) %}\r\n            {% if widgets_config_json%}\r\n                {% for widgets_config in widgets_config_json %}\r\n                    {% set _ = logger.info(\"going to process widgets_config: \" + str(widgets_config)) %}\r\n                    {% set data_format = widgets_config.get(\"data_format\") %}\r\n                    {% if not data_format %}\r\n                        {% set data_format = \"row-wise\" %}\r\n                    {% endif %}\r\n                    {% set asset_types = widgets_config.get(\"asset_types\") %}\r\n                    {% set matched_asset_types = [] %}\r\n                    {% for asset_type in asset_types %}\r\n                        {% if asset_type in alert_asset_types or asset_type == \"*\" %}\r\n                            {% set _= matched_asset_types.append(asset_type) %}\r\n                        {% else %}\r\n                            {% set _ = logger.warning(\"No match for asset_type: '\" + asset_type + \"' in alert_asset_types: \" + str(alert_asset_types)) %}\r\n                        {% endif %}\r\n                    {% endfor %}\r\n                    {% set _ = logger.info(\"Final value of matched_asset_types: \" + str(matched_asset_types)) %}\r\n                    {% if matched_asset_types %}\r\n                        {% set stream_name = widgets_config.get(\"stream_name\") %}\r\n                        {% set widgets = widgets_config.get(\"widgets\") %}\r\n                        {% set asset_types_str = matched_asset_types|join(\",\") %}\r\n                        {% if widgets and widgets|length > 0 %}\r\n                            {% for widget_config in widgets %}\r\n                                {% set metric_meta_stream = widget_config.get(\"metric_meta_stream\", widget_config.get(\"metric_stream\")) %}\r\n                                {% set metric_data_stream = widget_config.get(\"metric_data_stream\", metric_meta_stream) %}\r\n                                {% set tag_column_names = widget_config.get(\"meta_tag_columns\", widget_config.get(\"tag_columns\")) %}\r\n                                {% set _ = logger.info(\"Found tag_column_names as: \" + str(tag_column_names)) %}\r\n                                {% set meta_asset_columns = widget_config.get(\"meta_asset_columns\", widget_config.get(\"asset_columns\")) %}\r\n                                {% set data_asset_columns = widget_config.get(\"data_asset_columns\", meta_asset_columns) %}\r\n                                {% set meta_metric_id_col = widget_config.get(\"meta_metric_id_col\", widget_config.get(\"metric_id_col\", \"metric_id\")) %}\r\n                                {% set data_metric_id_col = widget_config.get(\"data_metric_id_col\") %}\r\n                                {% set data_metric_value_col = widget_config.get(\"data_metric_value_col\", widget_config.get(\"metric_value_col\", \"value\")) %}\r\n\r\n                                {% set metric_id_value = widget_config.get(\"meta_metric_id_value\", widget_config.get(\"metric_id_value\")) %}\r\n                                {% set metric_label_col = widget_config.get(\"meta_metric_label_col\", widget_config.get(\"metric_label_col\", \"metric_label\")) %}\r\n                                {% set unit_col = widget_config.get(\"meta_unit_col\", widget_config.get(\"unit_col\", \"unit\")) %}\r\n                                {% set meta_timestamp_col = widget_config.get(\"meta_timestamp_col\", widget_config.get(\"timestamp_col\", \"timestamp\")) %}\r\n                                {% set data_timestamp_col = widget_config.get(\"data_timestamp_col\", meta_timestamp_col) %}\r\n                                {% set meta_query_extra_filter = widget_config.get(\"meta_query_extra_filter\") %}\r\n                                {% set data_query_extra_filter = widget_config.get(\"data_query_extra_filter\") %}\r\n                                {% set use_timestamp_for_meta = widget_config.get(\"use_timestamp_for_meta\", false) %}\r\n                                {% set _ = logger.info(\"1\") %}\r\n                                {% for asset_id in alert_id_values%}\r\n                                    {% set _ = logger.info(\"2\") %}\r\n                                    {% set ns.meta_timestamp_string = \"\" %}\r\n                                    {% if use_timestamp_for_meta %}\r\n                                        {% set meta_timestamp_string = meta_timestamp_col + \" is after '\" + str(from_time_str) + \"' and \" + meta_timestamp_col + \" is before '\" + str(to_time_str) + \"' \" %}\r\n                                    {% endif %}\r\n                                    {% set ns.metrics_query = \"\" %}\r\n                                    {% set is_first = \"true\" %}\r\n                                    {% set _ = logger.info(\"3\") %}\r\n                                    {% for meta_asset_column in meta_asset_columns %}\r\n                                        {% set _ = logger.info(\"4\") %}\r\n                                        {% if is_first == \"true\" %}\r\n                                            {% set is_first = \"false\" %}\r\n                                        {% else %}\r\n                                            {% set ns.metrics_query = ns.metrics_query + \" or \" %}\r\n                                        {% endif %}\r\n                                        {% set ns.metrics_query = ns.metrics_query + meta_asset_column + \" is '\" + asset_id + \"'\" %}\r\n                                    {% endfor %}\r\n                                    {% set ns.metrics_query = \" ( \" + ns.metrics_query + \" ) and \" + meta_metric_id_col + \" is '\" + metric_id_value + \"' \" %}\r\n                                    {% if use_timestamp_for_meta %}\r\n                                        {% set ns.metrics_query = ns.metrics_query + \" and \" + meta_timestamp_string %}\r\n                                    {% endif %}\r\n                                    {% if meta_query_extra_filter %}\r\n                                        {% set ns.metrics_query = ns.metrics_query + \" and \" + meta_query_extra_filter %}\r\n                                    {% endif %}\r\n                                    {% set used_asset_ids = [] %}\r\n                                    {% set _ = logger.info(\"Final ns.metrics_query is: \" + str(ns.metrics_query)) %}\r\n                                    {% set metrics_res = engine.query_stream_data(stream=metric_meta_stream, cfxql_query=ns.metrics_query, max_rows=1, limit=1) %}\r\n                                    {% set _ = logger.info(\"metrics_res are: \" + str(metrics_res)) %}\r\n                \r\n                                    {% for item in metrics_res %}\r\n                                        {% set metric_label = item.get(metric_label_col, metric_id_value) %}\r\n                                        {% set unit = item.get(unit_col, \"value\") %}\r\n                                        {% set ns.tag_columns = [] %}\r\n                                        {% if ns.alert_tag_values and asset_id in ns.alert_tag_values%}\r\n                                            {% for tag_col in ns.alert_tag_values[asset_id] %}\r\n                                                {% set _ = ns.tag_columns.append({\"label\":tag_col, \"value\":tag_col}) %}\r\n                                            {% endfor %}\r\n                                        {% endif %}\r\n                                        {% if tag_column_names %}\r\n                                            {% for tag_col_name in tag_column_names %}\r\n                                                {% set tag_col = item.get(tag_col_name) %}\r\n                                                {% if tag_col %}\r\n                                                    {% set _ = ns.tag_columns.append({\"label\":tag_col, \"value\":tag_col}) %}\r\n                                                {% endif %}\r\n                                            {% endfor %}\r\n                                        {% endif %}\r\n                                        {% set metric_source = item.get(\"metric_source\", \"\") %}\r\n                                        {% set ns.data_query = \"\" %}\r\n                                        {% set is_first = \"true\" %}\r\n                                        {% set ns.firstAssetId = \"\" %}\r\n                                        {% for data_asset_column in data_asset_columns %}\r\n                                            {% set asset_id = item.get(data_asset_column) %}\r\n                                            {% if asset_id %}\r\n                                                {% if is_first == \"true\" %}\r\n                                                    {% set is_first = \"false\" %}\r\n                                                    {% set ns.firstAssetId = asset_id %}\r\n                                                {% else %}\r\n                                                    {% set ns.data_query = ns.data_query + \" or \" %}\r\n                                                {% endif %}\r\n                                                {% set ns.data_query = ns.data_query + data_asset_column + \" is '\" + asset_id + \"'\" %}\r\n                                            {% else %}\r\n                                                {% set _ = logger.info(\"Ignoring data_asset_column: \" + data_asset_column + \" as it is empty for metric_label: \" + metric_label) %}\r\n                                            {% endif %}\r\n                                        {% endfor %}\r\n                                        {% set data_timestamp_string = data_timestamp_col + \" is after '\" + str(from_time_str) + \"' and \" + data_timestamp_col + \" is before '\" + str(to_time_str) + \"' \" %}\r\n                                        {% set ns.data_query = \" ( \" + ns.data_query + \" ) and \" + data_timestamp_string %}\r\n                                        {% if data_metric_id_col %}\r\n                                            {% set ns.data_query = ns.data_query + \" and \" + data_metric_id_col + \" is '\" + metric_id_value + \"'\" %}\r\n                                        {% endif %}\r\n                                        {% if data_query_extra_filter %}\r\n                                            {% set ns.data_query = ns.data_query + \" and \" + data_query_extra_filter %}\r\n                                        {% endif %}\r\n                                        {% set _ = logger.info(\"Final ns.data_query is: \" + str(ns.data_query)) %}\r\n                                        {% set ns.widget = {\r\n                                                \"title\": asset_types_str + \" - \" + ns.firstAssetId + \" - \" + metric_label,\r\n                                                \"widget_type\": \"timeseries\",\r\n                                                \"stream\": metric_data_stream,\r\n                                                \"extra_filter\": ns.data_query,\r\n                                                \"ts_column\": \"timestamp\",\r\n                                                \"max_width\": 12,\r\n                                                \"height\": 5,\r\n                                                \"min_width\": 12,\r\n                                                \"fixTimeWindow\": True,\r\n                                                \"xAxisLabel\": \"Timestamp\",\r\n                                                \"yAxisLabel\": unit,\r\n                                                \"static_markers\": [\r\n                                                    {\r\n                                                        \"timestamp\": incident_occurance_time,\r\n                                                        \"message\": \"Incident Occurred\",\r\n                                                        \"color\": \"#B71C1C\"\r\n                                                    }\r\n                                                ],\r\n                                                \"chartProperties\": {\r\n                                                    \"yAxisLabel\": unit,\r\n                                                    \"xAxisLabel\": \"Timestamp\",\r\n                                                    \"legendLocation\": \"none\"\r\n                                                },\r\n                                                \"interval\": \"5Min\",\r\n                                                \"series_spec\": [\r\n                                                    {\r\n                                                        \"column\": data_metric_value_col,\r\n                                                        \"agg\": \"sum\",\r\n                                                        \"type\": \"float\"\r\n                                                    }\r\n                                                ],\r\n                                                \"filterTags\": ns.tag_columns,\r\n                                                \"widget_id\": ns.firstAssetId + \" - \" + metric_label\r\n                                            }\r\n                                        %}\r\n                                        {% set x = dashboard[\"dashboard_sections\"][0][\"widgets\"].append(ns.widget) %}\r\n                                    {% endfor %}\r\n                                {% endfor %}\r\n                            {% endfor %}\r\n                        {% endif %}\r\n                    {% else %}\r\n                        {% set _ = logger.warning(\"No match found among alert_asset_types: \" + str(alert_asset_types) + \" and asset_types: \" + str(asset_types) + \" defined for widget config in page config hence skipping this widget config with matched_asset_types: \" + str(matched_asset_types)) %}\r\n                    {% endif %}\r\n                {% endfor %}\r\n            {% else %}\r\n                {% set _ = logger.warning(\"No widget_config_json defined for page config hence no metrics widgets for incident: \" + incidentid) %}\r\n            {% endif %}\r\n        {% else %}\r\n            {% set _ = logger.warning(\"No alert types or id values found but page config is defined to use alerts hence no metrics for incident: \" + incidentid) %}\r\n        {% endif %}\r\n    {% else %}\r\n        {% set timestamp_string = \"timestamp is after '\" + str(from_time_str) + \"' and \" + \"timestamp is before '\" + str(to_time_str) + \"' \" %}\r\n        {% set _ = logger.info(\"Got timestamp_string is: \" + str(timestamp_string)) %}\r\n        {% set x = dashboard[\"dashboard_filters\"][\"default_time_range\"].__setitem__(\"from_time\", str(from_time_str)) %}\r\n        {% set x = dashboard[\"dashboard_filters\"][\"default_time_range\"].__setitem__(\"to_time\", str(to_time_str)) %}\r\n        {% set config_items_str = incident.get(\"i_config_items\") %}\r\n        {% set asset_ids = [] %}\r\n        {% if config_items_str and \"metric_asset_id\" in config_items_str %}\r\n            {% set config_items = json_loads(config_items_str) %}\r\n            {% if \"alert_attributes\" in config_items %}\r\n                {% set alert_attributes_str = config_items.get(\"alert_attributes\") %}\r\n                {% if alert_attributes_str and \"metric_asset_id\" in alert_attributes_str %}\r\n                    {% set alert_attributes = json_loads(alert_attributes_str) %}\r\n                    {% if \"metric_asset_id\" in alert_attributes %}\r\n                        {% set x = asset_ids.append(alert_attributes.get(\"metric_asset_id\")) %}\r\n                        {% set _ = logger.info(\"Added metric_asset_id \" + alert_attributes.get(\"metric_asset_id\") +\" for incident \" + incidentid + \" to list of eligible metric asset IDs\") %}\r\n                    {% endif %}\r\n                {% endif %}\r\n            {% endif %}\r\n        {% endif %}\r\n\r\n        {% set alert_query = \"a_incident_id is '\" + incidentid + \"'\" %}\r\n        {% set alerts_res = engine.query_stream_aggs(stream=\"oia-alerts-stream\", cfxql_query=alert_query, aggs=[{\"field\": \"count_\", \"func\": \"max\"}], groupby=[\"a_en_metric_asset_id\"]) %}\r\n        {% set _ = logger.debug(\"For incident \" + incidentid + \" found alerts:\" + json_dumps(alerts_res)) %}\r\n        {% for item in alerts_res %}\r\n            {% set metric_asset_id = item.get(\"a_en_metric_asset_id\") %}\r\n            {% if metric_asset_id not in asset_ids %}\r\n                {% set x = asset_ids.append(metric_asset_id) %}\r\n                {% set _ = logger.debug(\"From alerts added metric_asset_id \" + metric_asset_id +\" for incident \" + incidentid + \" to list of eligible metric asset IDs\") %}\r\n            {% endif %}\r\n        {% endfor %}\r\n        \r\n        {% if asset_ids %}\r\n            {% set asset_id_str = asset_ids|join(\"', '\") %}\r\n            {% set asset_id_str = \"['\" + asset_id_str + \"']\" %}\r\n            {% set metrics_query = \"asset_id in \" + asset_id_str + \" and \" + timestamp_string + \" and anomaly_score is greater than 0\"%}\r\n            {% set metrics_res = engine.query_stream_aggs(stream=\"oia-ml-metrics-meta-output\", cfxql_query=metrics_query, aggs=[{\"field\": \"anomaly_score\", \"func\": \"max\"}], groupby=[\"asset_id\", \"metric_id\", \"metric_label\", \"unit\", \"metric_source\"], sorting=[{\"anomaly_score\":\"desc\"}]) %}\r\n            {% set _ = logger.debug(\"metrics_res are: \" + str(metrics_res)) %}\r\n            {% for item in metrics_res %}\r\n                {% set asset_id = item.get(\"asset_id\") %}\r\n                {% set metric_id = item.get(\"metric_id\") %}\r\n                {% set metric_label = item.get(\"metric_label\") %}\r\n                {% set unit = item.get(\"unit\") %}\r\n                {% set metric_source = item.get(\"metric_source\") %}\r\n                {% set data_filter = \"asset_id is '\" + asset_id + \"' and metric_id is '\" + metric_id + \"' and \" + timestamp_string %}\r\n                {% set anomalies_filter = \"asset_id is '\" + asset_id + \"' and metric_id is '\" + metric_id + \"' and \" + timestamp_string + \" and anomalies_type is 'upper' and anomalies_severity is 'High' \"  %}\r\n                \r\n                {% set widget = {\r\n                    \"title\": asset_id + \" - \" + metric_label,\r\n                    \"widget_type\": \"timeseries_multisource\",\r\n                    \"max_width\": 12,\r\n                    \"height\": 5,\r\n                    \"min_width\": 12,\r\n                    \"fixTimeWindow\": True,\r\n                    \"xAxisLabel\": \"Timestamp\",\r\n                    \"yAxisLabel\": unit,\r\n                    \"static_markers\": [\r\n                        {\r\n                            \"timestamp\": incident_occurance_time,\r\n                            \"message\": \"Incident Occurred\",\r\n                            \"color\": \"#B71C1C\"\r\n                        }\r\n                    ],\r\n                    \"chartProperties\": {\r\n                        \"xAxisLabel\": \"Timestamp\",\r\n                        \"yAxisLabel\": unit,\r\n                        \"legendLocation\": \"bottom\",\r\n                        \"xAxisTickOrientation\": \"STAGGERED\",\r\n                        \"mode\": \"zoom\",\r\n                        \"options\": {\r\n                            \"elements\": {\r\n                                \"line\": {\r\n                                    \"borderWidth\": 1\r\n                                },\r\n                                \"point\": {\r\n                                    \"radius\": 2,\r\n                                    \"hitRadius\": 3,\r\n                                    \"hoverRadius\": 3\r\n                                }\r\n                            }\r\n                        },\r\n                        \"dashboards\": [\r\n                            {\r\n                                \"action\": {\r\n                                    \"permission\": \"rda:user_dashboard:view\",\r\n                                    \"appName\": \"user-dashboard/oia-war-room\",\r\n                                    \"identifier\": \"launch.dashboard.oia-war-room\",\r\n                                    \"title\": \"War Room\",\r\n                                    \"type\": \"GO_TO_APP_STATE\"\r\n                                },\r\n                                \"context\": {}\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"sources\": [\r\n                        {\r\n                            \"source_label\": \"upper_anomaly\",\r\n                            \"stream\": \"oia-ml-metrics-regression-output\",\r\n                            \"hide_lines\": true,\r\n                            \"ts_column\": \"timestamp\",\r\n                            \"color\": \"#ff0000\",\r\n                            \"extra_filter\": anomalies_filter,\r\n                            \"series_spec\": [\r\n                                {\r\n                                    \"label\": \"Anomaly\",\r\n                                    \"column\": \"all-baseline\",\r\n                                    \"agg\": \"max\",\r\n                                    \"type\": \"float\"\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            \"source_label\": \"actual\",\r\n                            \"stream\": \"oia-ml-metrics-regression-output\",\r\n                            \"ts_column\": \"timestamp\",\r\n                            \"color\": \"#42A5F5\",\r\n                            \"extra_filter\": data_filter,\r\n                            \"series_spec\": [\r\n                                {\r\n                                    \"label\": \"Actual\",\r\n                                    \"column\": \"all-baseline\",\r\n                                    \"agg\": \"max\",\r\n                                    \"type\": \"float\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                    \"filterTags\": [\r\n                        {\r\n                            \"label\": metric_source,\r\n                            \"value\": metric_source\r\n                        }\r\n                    ],\r\n                    \"widget_id\": asset_id + \"_\" + metric_id\r\n                } %}\r\n                {% set x = dashboard[\"dashboard_sections\"][0][\"widgets\"].append(widget) %}\r\n            {% endfor %}\r\n        {% else %}\r\n            {% set _ = logger.warning(\"No assets hence no metrics for incident: \" + incidentid) %}\r\n        {% endif %}\r\n    {% endif %}\r\n{% else %}\r\n  {% set _ = logger.warning(\"Can not find incident details hence can not show metrics for incident: \" + incidentid) %}\r\n{% endif %}\r\n{% set _ = logger.debug(\"Final metrics dashboard: \" + str(dashboard)) %}\r\n"
        }
    ]
}
